/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package org.netbeans.modules.plantumlnb;

import java.awt.image.BufferedImage;
import java.awt.peer.ComponentPeer;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.IOException;
import java.io.InputStream;
import java.net.URL;
import java.util.Collection;
import java.util.Iterator;
import java.util.Set;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.SwingUtilities;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.filesystems.FileChangeAdapter;
import org.openide.filesystems.FileChangeListener;
import org.openide.filesystems.FileEvent;
import org.openide.filesystems.FileObject;
import org.openide.loaders.DataObject;
import org.openide.loaders.DataObjectNotFoundException;
import org.openide.util.Lookup;
import org.openide.util.LookupEvent;
import org.openide.util.LookupListener;
import org.openide.util.NbBundle;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;
import org.openide.util.RequestProcessor;

/**
 * Top component which displays something.
 */
@ConvertAsProperties( dtd = "-//org.netbeans.modules.plantumlnb//PUML//EN",
    autostore = false)
@TopComponent.Description( preferredID = "PUMLTopComponent",
    iconBase = "org/netbeans/modules/plantumlnb/icon.png",
    persistenceType = TopComponent.PERSISTENCE_ALWAYS)
@TopComponent.Registration(mode = "properties", openAtStartup = false) //rightSlidingSide
@ActionID(category = "Window", id = "org.netbeans.modules.plantumlnb.PUMLTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration( displayName = "#CTL_PUMLAction",
    preferredID = "PUMLTopComponent")
@Messages({
    "CTL_PUMLAction=PUML",
    "CTL_PUMLTopComponent=PlantUML",
    "HINT_PUMLTopComponent=This is a PlantUML window"
})
public final class PUMLTopComponent extends TopComponent {

      
    
    /**
     * template for finding data in given context. Object used as example,
     * replace with your own data source, for example JavaDataObject etc
     */
    private static final Lookup.Template MY_DATA = new Lookup.Template(pumlDataObject.class);
    
    /**
     * current context to work on
     */
    private Lookup.Result currentContext;
    
    /**
     * listener to context changes
     */
    private LookupListener contextListener;
    
    /**
     * Listens for changes on image file.
     */
    private FileChangeListener fileChangeListener;
    
    /**
      * holds UI of this panel
      */
    private ImagePreviewPanel panelUI;
    
    private DataObject currentDataObject;   
    private long lastSaveTime = -1;
    private static final RequestProcessor WORKER = new RequestProcessor(PUMLTopComponent.class.getName());
    
    private PUMLGenerator pumlGenerator = new PUMLGenerator();
    private DataObject.Registry registries = DataObject.getRegistry();    
    private TopComponent.Registry topComponentRegistry = TopComponent.getRegistry();
    private PUMLFileChangedListener pumlFileChangedListener = new PUMLFileChangedListener();
    private PUMLTopComponentPropertyChangeListener pumlTopComponentPropertyChangeListener = new PUMLTopComponentPropertyChangeListener();
    
    
    public PUMLTopComponent() {
        initComponents();
        addCustomComponents();
        setName(Bundle.CTL_PUMLTopComponent());
        setToolTipText(Bundle.HINT_PUMLTopComponent());

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private  void addCustomComponents(){        
        panelUI = new ImagePreviewPanel();

        javax.swing.GroupLayout panelUILayout = new javax.swing.GroupLayout(panelUI);
        panelUI.setLayout(panelUILayout);
        panelUILayout.setHorizontalGroup(
            panelUILayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        panelUILayout.setVerticalGroup(
            panelUILayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelUI, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelUI, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>

        
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
          // lookup context and listen to result to get notified about context changes
        currentContext = getLookup().lookup(MY_DATA);
        currentContext.addLookupListener(getContextListener());
        // get actual data and recompute content
        Collection data = currentContext.allInstances();
        currentDataObject = getDataObject(data);
//        if (currentDataObject == null) {
//            return;
//        }
//        if (fileChangeListener == null) {
//            fileChangeListener = new PUMLTopComponent.PUMLFileChangeAdapter();
//        }
//        currentDataObject.getPrimaryFile().addFileChangeListener(fileChangeListener);
        
        /**
         * Attach event handler
         */        
        registries.addChangeListener(pumlFileChangedListener);
        topComponentRegistry.addPropertyChangeListener(pumlTopComponentPropertyChangeListener);
        
        setNewContent(currentDataObject);
    }

    @Override
    public void componentClosed() {
        registries.removeChangeListener(pumlFileChangedListener);
        topComponentRegistry.removePropertyChangeListener(pumlTopComponentPropertyChangeListener);
    }
    
    @Override
    public void componentActivated(){
        // lookup context and listen to result to get notified about context changes
        currentContext = getLookup().lookup(MY_DATA);
        currentContext.addLookupListener(getContextListener());
        // get actual data and recompute content
        Collection data = currentContext.allInstances();
        currentDataObject = getDataObject(data);
//        if (currentDataObject == null) {
//            return;
//        }
//        if (fileChangeListener == null) {
//            fileChangeListener = new PUMLTopComponent.PUMLFileChangeAdapter();
//        }
//        currentDataObject.getPrimaryFile().addFileChangeListener(fileChangeListener);
        setNewContent(currentDataObject);
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }
        
    public void getComponent() {
        if (lastSaveTime == -1) {
            lastSaveTime = System.currentTimeMillis();
        }
        if (panelUI == null) {
            panelUI = new ImagePreviewPanel();
        }
        
        add(panelUI);
    }
    
    private void setNewContent(final DataObject dataObject) {
        if (dataObject == null) {
            return;
        }

        WORKER.post(new Runnable() {

            @Override
            public void run() {
                InputStream inputStream = null;
                BufferedImage image = null;
                
                try {
//                    FileObject fileObject = dataObject.getPrimaryFile();
//                    if (fileObject == null) {
//                        return;
//                    }
//                    inputStream = fileObject.getInputStream(); //TODO: This should be enabled later.
//                    if (inputStream == null) {
//                        return;
//                    }
                                    
                    Set fss = dataObject.files();
                    Iterator iter = fss.iterator();
                    while (iter.hasNext()) {
                        FileObject fo = (FileObject) iter.next();
                        setNewContent((InputStream) pumlGenerator.generate(fo));
                    }
                                       
                    
                    if (panelUI == null) {
                        getComponent();
                    }
                    try {
//                        image = ImageIO.read(inputStream);
                        URL imageUrl = getClass().getResource("classes_001.png");
                        
                        image = ImageIO.read( getClass().getResourceAsStream("classes_001.png"));
                        
                    } catch (IllegalArgumentException iaex) {
                        Logger.getLogger(PUMLTopComponent.class.getName()).info(NbBundle.getMessage(PUMLTopComponent.class, "ERR_IOFile"));
                        inputStream.close();
                    } 
//                    inputStream.close();
                } catch (IOException ex) {
                    Logger.getLogger(PUMLTopComponent.class.getName()).info(NbBundle.getMessage(PUMLTopComponent.class, "ERR_IOFile"));
                } finally {
                    final BufferedImage fImage = image;
                    SwingUtilities.invokeLater(new Runnable() {
                        @Override
                        public void run() {
                            panelUI.setImage(fImage);
                        }
                    });
                }
            }
        });

    }
    
    private void setNewContent(final InputStream inputStream) {
        if (inputStream == null) {
            return;
        }

        WORKER.post(new Runnable() {

            @Override
            public void run() {
                BufferedImage image = null;
                try {                    
                    if (panelUI == null) {
                        getComponent();
                    }                    
                    image = ImageIO.read(inputStream);                                            
                } catch (IllegalArgumentException iaex) {
                    Logger.getLogger(PUMLTopComponent.class.getName()).info(NbBundle.getMessage(PUMLTopComponent.class, "ERR_IOFile"));                        
                } catch (IOException ex) {
                    Logger.getLogger(PUMLTopComponent.class.getName()).info(NbBundle.getMessage(PUMLTopComponent.class, "ERR_IOFile"));
                } finally {
                    
                    try {
                        inputStream.close();
                    } catch (IOException ex) {
                        Logger.getLogger(PUMLTopComponent.class.getName()).info(NbBundle.getMessage(PUMLTopComponent.class, "ERR_IOFile"));
                    }
                    
                    final BufferedImage fImage = image;
                    SwingUtilities.invokeLater(new Runnable() {
                        @Override
                        public void run() {
                            panelUI.setImage(fImage);
                        }
                    });
                }
            }
        });

    }
    
    /**
     * Method to call to render a default image when the file opened in the 
     * editor is not a puml file.
     */
    private void setDefaultContent(){
        if (panelUI == null) {
            getComponent();
        }                    
        try {
            final BufferedImage image = ImageIO.read(getClass().getResourceAsStream("default-icon.png")); 
                        
            SwingUtilities.invokeLater(new Runnable() {
                @Override
                public void run() {
                    panelUI.setImage(image);
                }
            });
        } catch (IOException ex) {
            Logger.getLogger(PUMLTopComponent.class.getName()).info(ex.toString());             
        }
    }
    
    private DataObject getDataObject(Collection data) {
        DataObject dataObject = null;
        Iterator it = data.iterator();
        while (it.hasNext()) {
            Object o = it.next();
            if (o instanceof pumlDataObject) {
                dataObject = (DataObject) o;
                break;
            }
        }
        return dataObject;
    }
    
    
    /**
     * Accessor for listener to context
     */
    private LookupListener getContextListener() {
        if (contextListener == null) {
            contextListener = new PUMLTopComponent.ContextListener();
        }
        return contextListener;
    }
    
    
    
    /**
     * Listens to changes of context and triggers proper action
     */
    private class ContextListener implements LookupListener {

        @Override
        public void resultChanged(LookupEvent ev) {
            Collection data = ((Lookup.Result) ev.getSource()).allInstances();
            currentDataObject = getDataObject(data);
            setNewContent(currentDataObject);
        }
    }
    
    
    private class PUMLFileChangeAdapter extends FileChangeAdapter {

        @Override
        public void fileChanged(final FileEvent fe) {
            if (fe.getTime() > lastSaveTime) {
                lastSaveTime = System.currentTimeMillis();

                // Refresh image viewer
                SwingUtilities.invokeLater(new Runnable() {

                    public void run() {
                        try {
                            currentDataObject = DataObject.find(fe.getFile());
                            setNewContent(currentDataObject);
                        } catch (DataObjectNotFoundException ex) {
                            Logger.getLogger(PUMLTopComponent.class.getName()).info(NbBundle.getMessage(PUMLTopComponent.class, "ERR_DataObject"));
                        }
                    }
                });
            }
        }
    }
    
    
    public class PUMLFileChangedListener implements ChangeListener{

        @Override
        public void stateChanged(ChangeEvent e) {
            DataObject.Registry registries = DataObject.getRegistry();

            DataObject[] objects = registries.getModified();
            for (int i = 0; i < objects.length; i++) {
                DataObject dataObj = objects[i];
                Set fss = dataObj.files();
                Iterator iter = fss.iterator();
                while (iter.hasNext()) {
                    FileObject fo = (FileObject) iter.next();
                    if(fo.getExt().toLowerCase().equals("puml")){
                        setNewContent((InputStream) pumlGenerator.generate(fo));
                    } else {
                        setDefaultContent();
                    }
                }
            }
        }                    
    
    }
    
    public class PUMLTopComponentPropertyChangeListener implements PropertyChangeListener {

        @Override
        public void propertyChange(PropertyChangeEvent evt) {
            System.out.println(evt.getPropertyName());
            if(evt.getPropertyName().toLowerCase().equals(TopComponent.Registry.PROP_OPENED) 
                    && evt.getNewValue() instanceof TopComponent){
                TopComponent tc = (TopComponent) evt.getNewValue();
                ComponentPeer cp = tc.getPeer();
                
//                String displayName = ((Node[]) evt.getNewValue())[0].getDisplayName();            

//                if(displayName.toLowerCase().endsWith("puml")){
//                    System.out.println("This gets Fired");
//                }
            }
        }     
        
        
    }

    
}


    
