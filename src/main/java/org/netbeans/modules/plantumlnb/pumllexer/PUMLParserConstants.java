/* Generated By:JavaCC: Do not edit this line. PUMLParserConstants.java */
package org.netbeans.modules.plantumlnb.pumllexer;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface PUMLParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int WHITESPACE = 1;
  /** RegularExpression Id. */
  int SINGLE_LINE_COMMENT = 2;
  /** RegularExpression Id. */
  int FORMAL_COMMENT = 3;
  /** RegularExpression Id. */
  int MULTI_LINE_COMMENT = 4;
  /** RegularExpression Id. */
  int START_UML = 6;
  /** RegularExpression Id. */
  int END_UML = 7;
  /** RegularExpression Id. */
  int AS = 8;
  /** RegularExpression Id. */
  int ALSO = 9;
  /** RegularExpression Id. */
  int AUTO_NUMBER = 10;
  /** RegularExpression Id. */
  int TITLE = 11;
  /** RegularExpression Id. */
  int NEW_PAGE = 12;
  /** RegularExpression Id. */
  int BOX = 13;
  /** RegularExpression Id. */
  int ALT = 14;
  /** RegularExpression Id. */
  int ELSE = 15;
  /** RegularExpression Id. */
  int OPT = 16;
  /** RegularExpression Id. */
  int LOOP = 17;
  /** RegularExpression Id. */
  int PAR = 18;
  /** RegularExpression Id. */
  int BREAK = 19;
  /** RegularExpression Id. */
  int CRITICAL = 20;
  /** RegularExpression Id. */
  int NOTE = 21;
  /** RegularExpression Id. */
  int GROUP = 22;
  /** RegularExpression Id. */
  int LEFT = 23;
  /** RegularExpression Id. */
  int RIGHT = 24;
  /** RegularExpression Id. */
  int OF = 25;
  /** RegularExpression Id. */
  int ON = 26;
  /** RegularExpression Id. */
  int LINK = 27;
  /** RegularExpression Id. */
  int OVER = 28;
  /** RegularExpression Id. */
  int END = 29;
  /** RegularExpression Id. */
  int ACTIVATE = 30;
  /** RegularExpression Id. */
  int DEACTIVATE = 31;
  /** RegularExpression Id. */
  int DESTROY = 32;
  /** RegularExpression Id. */
  int CREATE = 33;
  /** RegularExpression Id. */
  int FOOTBOX = 34;
  /** RegularExpression Id. */
  int HIDE = 35;
  /** RegularExpression Id. */
  int SHOW = 36;
  /** RegularExpression Id. */
  int SKIN_PARAM = 37;
  /** RegularExpression Id. */
  int SKIN = 38;
  /** RegularExpression Id. */
  int TOP = 39;
  /** RegularExpression Id. */
  int BOTTOM = 40;
  /** RegularExpression Id. */
  int TOP_TO_BOTTOM_DIRECTION = 41;
  /** RegularExpression Id. */
  int PACKAGE = 42;
  /** RegularExpression Id. */
  int NAMESPACE = 43;
  /** RegularExpression Id. */
  int PAGE = 44;
  /** RegularExpression Id. */
  int UP = 45;
  /** RegularExpression Id. */
  int DOWN = 46;
  /** RegularExpression Id. */
  int IF = 47;
  /** RegularExpression Id. */
  int ENDIF = 48;
  /** RegularExpression Id. */
  int PARTITION = 49;
  /** RegularExpression Id. */
  int FOOTER = 50;
  /** RegularExpression Id. */
  int HEADER = 51;
  /** RegularExpression Id. */
  int CENTER = 52;
  /** RegularExpression Id. */
  int ROTATE = 53;
  /** RegularExpression Id. */
  int REF = 54;
  /** RegularExpression Id. */
  int RETURN = 55;
  /** RegularExpression Id. */
  int IS = 56;
  /** RegularExpression Id. */
  int REPEAT = 57;
  /** RegularExpression Id. */
  int START = 58;
  /** RegularExpression Id. */
  int STOP = 59;
  /** RegularExpression Id. */
  int WHILE = 60;
  /** RegularExpression Id. */
  int ENDWHILE = 61;
  /** RegularExpression Id. */
  int FORK = 62;
  /** RegularExpression Id. */
  int AGAIN = 63;
  /** RegularExpression Id. */
  int FORWARD_CALL_MESSAGE = 64;
  /** RegularExpression Id. */
  int FORWARD_CALL_DOTTED_MESSAGE = 65;
  /** RegularExpression Id. */
  int REVERSE_CALL_MESSAGE = 66;
  /** RegularExpression Id. */
  int REVERSE_CALL_DOTTED_MESSAGE = 67;
  /** RegularExpression Id. */
  int FORWARD_ASYNCHRONOUS_CALL_MESSAGE = 68;
  /** RegularExpression Id. */
  int REVERSE_ASYNCHRONOUS_CALL_MESSAGE = 69;
  /** RegularExpression Id. */
  int COLON_MESSAGE = 70;
  /** RegularExpression Id. */
  int ACTOR = 71;
  /** RegularExpression Id. */
  int PARTICIPANT = 72;
  /** RegularExpression Id. */
  int USECASE = 73;
  /** RegularExpression Id. */
  int CLASS = 74;
  /** RegularExpression Id. */
  int INTERFACE = 75;
  /** RegularExpression Id. */
  int ABSTRACT = 76;
  /** RegularExpression Id. */
  int ENUM = 77;
  /** RegularExpression Id. */
  int COMPONENT = 78;
  /** RegularExpression Id. */
  int STATE = 79;
  /** RegularExpression Id. */
  int OBJECT = 80;
  /** RegularExpression Id. */
  int IDENTIFIER = 81;
  /** RegularExpression Id. */
  int LETTER = 82;
  /** RegularExpression Id. */
  int PART_LETTER = 83;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int IN_FORMAL_COMMENT = 84;
  /** Lexical state. */
  int IN_MULTI_LINE_COMMENT = 85;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "<WHITESPACE>",
    "<SINGLE_LINE_COMMENT>",
    "\"\\\'/\"",
    "\"\\\'/\"",
    "<token of kind 5>",
    "\"@startuml\"",
    "\"@enduml\"",
    "\"as\"",
    "\"also\"",
    "\"autonumber\"",
    "\"title\"",
    "\"newpage\"",
    "\"box\"",
    "\"alt\"",
    "\"else\"",
    "\"opt\"",
    "\"loop\"",
    "\"par\"",
    "\"break\"",
    "\"critical\"",
    "\"note\"",
    "\"group\"",
    "\"left\"",
    "\"right\"",
    "\"of\"",
    "\"on\"",
    "\"link\"",
    "\"over\"",
    "\"end\"",
    "\"activate\"",
    "\"deactivate\"",
    "\"destroy\"",
    "\"create\"",
    "\"footbox\"",
    "\"hide\"",
    "\"show\"",
    "\"skinparam\"",
    "\"skin\"",
    "\"top\"",
    "\"bottom\"",
    "\"top to bottom direction\"",
    "\"package\"",
    "\"namespace\"",
    "\"page\"",
    "\"up\"",
    "\"down\"",
    "\"if\"",
    "\"endif\"",
    "\"partition\"",
    "\"footer\"",
    "\"header\"",
    "\"center\"",
    "\"rotate\"",
    "\"ref\"",
    "\"return\"",
    "\"is\"",
    "\"repeat\"",
    "\"start\"",
    "\"stop\"",
    "\"while\"",
    "\"endwhile\"",
    "\"fork\"",
    "\"again\"",
    "\"->\"",
    "\"-->\"",
    "\"<-\"",
    "\"<--\"",
    "\"->>\"",
    "\"<<-\"",
    "\":\"",
    "\"actor\"",
    "\"participant\"",
    "\"usecase\"",
    "\"class\"",
    "\"interface\"",
    "\"abstract\"",
    "\"enum\"",
    "\"component\"",
    "\"state\"",
    "\"object\"",
    "<IDENTIFIER>",
    "<LETTER>",
    "<PART_LETTER>",
  };

}
